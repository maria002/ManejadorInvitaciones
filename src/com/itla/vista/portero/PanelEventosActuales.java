package com.itla.vista.portero;

import com.itla.modelo.Evento;
import com.itla.modelo.Sesion;
import com.itla.servicios.ServicioEvento;
import com.itla.vista.administrador.PanelDetalleEvento;
import com.itla.vista.comun.AbstractPanel;
import java.awt.Window;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Samuel
 */
public class PanelEventosActuales extends AbstractPanel {

    private ServicioEvento servicio = new ServicioEvento();
    private ArrayList<Evento> eventos;
    DefaultTableModel model;
    Object[] columnasTabla;
    private Evento eventoSeleccionado;
    private int filaTmp = -1;

    public PanelEventosActuales() {
        refrescar();
        columnasTabla = getColumnsNames();
        model = new javax.swing.table.DefaultTableModel(getData(), columnasTabla) {
            Class[] types = new Class[]{
                java.lang.Boolean.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean[]{
                true, false, false, false, false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        initComponents();
        tablaEvento.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                JTable target = (JTable) e.getSource();
                if (filaTmp != -1) {
                    if (target.getSelectedColumn() == 0) {
                        model.setValueAt(false, filaTmp, 0);
                    }
                }
                if (target.getSelectedColumn() == 0) {
                    filaTmp = target.getSelectedRow();
                }
            }
        });
        if(Sesion.eventoActual != null){
            
        }
    }

    public PanelEventosActuales(Window padre) {
        this();
        this.padre = padre;
    }

    private Object[] getColumnsNames() {
        return new Object[]{"Seleccionar", "Id", "Nombre", "Fecha", "Ubicacion", "Activo"};
    }

    private Object[][] getData() {
        Object[][] obj = new Object[eventos.size()][columnasTabla.length];
        for (int i = 0; i < eventos.size(); i++) {
            obj[i][0] = false;
            obj[i][1] = eventos.get(i).getId();
            obj[i][2] = eventos.get(i).getNombre();
            obj[i][3] = Evento.formato.format(eventos.get(i).getFecha());
            obj[i][4] = eventos.get(i).getUbicacion();
            obj[i][5] = eventos.get(i).isActivo();
        }
        return obj;
    }

    private void refrescar() {
        try {
            if (eventos != null) {
                eventos.clear();
            }
            eventos = servicio.seleccionarEventosDeHoy();
        } catch (SQLException ex) {
            Logger.getLogger(PanelEventosActuales.class
                    .getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(padre,
                    "Error cargando los datos", "Error cargando los datos", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void refrescarTabla() {
        ((DefaultTableModel) tablaEvento.getModel()).setDataVector(getData(), columnasTabla);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPaneEvento = new javax.swing.JScrollPane();
        tablaEvento = new javax.swing.JTable();
        btnRefrescar = new javax.swing.JButton();
        btnElegirEvento = new javax.swing.JButton();

        tablaEvento.setModel(model);
        scrollPaneEvento.setViewportView(tablaEvento);

        btnRefrescar.setText("Refrescar");
        btnRefrescar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefrescarActionPerformed(evt);
            }
        });

        btnElegirEvento.setText("Elegir Evento");
        btnElegirEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElegirEventoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnElegirEvento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRefrescar))
                    .addComponent(scrollPaneEvento, javax.swing.GroupLayout.DEFAULT_SIZE, 862, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPaneEvento, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnElegirEvento)
                    .addComponent(btnRefrescar))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnElegirEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElegirEventoActionPerformed
        boolean seleccion = false;
        int tmp = -1;
        for (int i = 0; i < model.getRowCount(); i++) {
            if ((boolean) model.getValueAt(i, 0)) {
                seleccion = true;
                tmp = i;
                break;
            }
        }
        if (seleccion) {
            eventoSeleccionado = new Evento();
            Vector obj = (Vector) model.getDataVector().get(tmp);
            eventoSeleccionado.setId((int) obj.get(1));
            eventoSeleccionado.setNombre((String) obj.get(2));
            try {
                eventoSeleccionado.setFecha(Evento.formato.parse((String) obj.get(3)));
            } catch (ParseException ex) {
                Logger.getLogger(PanelDetalleEvento.class.getName()).log(Level.SEVERE, null, ex);
            }
            eventoSeleccionado.setUbicacion((String) obj.get(4));
            eventoSeleccionado.setActivo((boolean) obj.get(5));
            JOptionPane.showMessageDialog(padre, "El portero esta trabajando en este evento", "Portero selecciono evento", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(padre, "Debe seleccionar un evento", "Seleccion Invalida", JOptionPane.WARNING_MESSAGE);
        }
        Sesion.eventoActual = eventoSeleccionado;
    }//GEN-LAST:event_btnElegirEventoActionPerformed

    private void btnRefrescarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefrescarActionPerformed
        refrescar();
        refrescarTabla();
    }//GEN-LAST:event_btnRefrescarActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnElegirEvento;
    private javax.swing.JButton btnRefrescar;
    private javax.swing.JScrollPane scrollPaneEvento;
    private javax.swing.JTable tablaEvento;
    // End of variables declaration//GEN-END:variables
}
